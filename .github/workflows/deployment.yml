name: Multi-Environment CI/CD - ECS Fargate

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'

env:
  AWS_REGION: ap-south-1

jobs:
  build-test-analyze:
    name: Build, Test, Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test

      - name: Static Code Analysis (CodeQL)
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-app-artifacts
          path: .

  deploy:
    name: Deploy to AWS ECS Fargate
    needs: build-test-analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nodejs-app-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        id: envsetup
        run: |
          if [[ "${GITHUB_REF##*/}" == main ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "ecs_cluster=nodejs-cluster-prod" >> $GITHUB_OUTPUT
            echo "ecs_service=nodejs-service-prod" >> $GITHUB_OUTPUT
            echo "tf_state_key=ecs-nodejs-app/prod/terraform.tfstate" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == develop ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "ecs_cluster=nodejs-cluster-staging" >> $GITHUB_OUTPUT
            echo "ecs_service=nodejs-service-staging" >> $GITHUB_OUTPUT
            echo "tf_state_key=ecs-nodejs-app/staging/terraform.tfstate" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
            echo "ecs_cluster=nodejs-cluster-dev" >> $GITHUB_OUTPUT
            echo "ecs_service=nodejs-service-dev" >> $GITHUB_OUTPUT
            echo "tf_state_key=ecs-nodejs-app/dev/terraform.tfstate" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init & Apply
        working-directory: ./terraform
        run: |
          terraform init -backend-config="bucket=my-terraform-state-bucket" \
                         -backend-config="key=${{ steps.envsetup.outputs.tf_state_key }}" \
                         -backend-config="region=${{ env.AWS_REGION }}"
          terraform apply -auto-approve

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag & Push Docker Image
        run: |
          IMAGE_URI=$(terraform -chdir=terraform output -raw ecr_repository_url)
          docker build -t nodejs-app .
          docker tag nodejs-app:latest $IMAGE_URI:${{ steps.envsetup.outputs.env }}
          docker push $IMAGE_URI:${{ steps.envsetup.outputs.env }}

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ steps.envsetup.outputs.ecs_cluster }} \
            --service ${{ steps.envsetup.outputs.ecs_service }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Post-Deployment Health Check
        run: |
          ALB_DNS=$(terraform -chdir=terraform output -raw alb_dns_name)
          echo "Deployed environment: ${{ steps.envsetup.outputs.env }}"
          echo "Application is accessible at: http://$ALB_DNS"
          curl -I http://$ALB_DNS || echo "Warning: App might not be ready yet."
