name: Multi-Environment CI/CD Pipeline - ECS Fargate

on:
  push:
    branches:
      - 'feature/*'   # Development environment
      - 'develop'     # Staging environment
      - 'main'        # Production environment

env:
  AWS_REGION: ap-south-1
  APP_NAME: nodejs-app
  TERRAFORM_DIR: ./terraform
  DOCKER_IMAGE: nodejs-app

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    # CODE CHECKOUT
    - name: Checkout Source Code
      uses: actions/checkout@v3

    # SETUP NODE & BUILD 
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install Dependencies & Build
      run: |
        npm install
        npm run build || echo "No build step, skipping..."

    #  STATIC CODE ANALYSIS 
    - name: Static Code Analysis (SonarQube)
      if: always()
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        npx sonar-scanner \
          -Dsonar.projectKey=${{ env.APP_NAME }} \
          -Dsonar.organization=my-org \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ env.SONAR_TOKEN }}

    # UNIT & INTEGRATION TESTS 
    - name: Run Unit & Integration Tests
      run: |
        npm test || echo "No tests found"

    # PACKAGE & UPLOAD ARTIFACT 
    - name: Package and Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ github.run_number }}
        path: |
          .
          !node_modules/

    # CONFIGURE AWS CREDENTIALS 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # TERRAFORM INFRASTRUCTURE SETUP
    - name: Terraform Init & Validate
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: |
        terraform init -reconfigure \
          -backend-config="bucket=my-terraform-state-bucket" \
          -backend-config="key=${{ env.APP_NAME }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
        terraform validate

    #LOGIN TO ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # BUILD, TAG, AND PUSH DOCKER IMAGE
    - name: Build & Push Docker Image to ECR
      run: |
        ECR_URL=$(terraform -chdir=${{ env.TERRAFORM_DIR }} output -raw ecr_repository_url)
        IMAGE_TAG=${GITHUB_SHA::7}
        docker build -t $ECR_URL:$IMAGE_TAG -t $ECR_URL:latest .
        docker push $ECR_URL:$IMAGE_TAG
        docker push $ECR_URL:latest
        echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    # DEPLOYMENT LOGIC PER ENVIRONMENT

    ## DEV DEPLOYMENT (feature/* branches)
    - name: Deploy to Development Environment
      if: startsWith(github.ref, 'refs/heads/feature/')
      run: |
        echo "ðŸš€ Deploying to Development Environment..."
        terraform -chdir=${{ env.TERRAFORM_DIR }} apply -var="env=dev" -auto-approve

    ## STAGING DEPLOYMENT (develop branch)
    - name: Deploy to Staging Environment
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "ðŸš€ Deploying to Staging Environment..."
        terraform -chdir=${{ env.TERRAFORM_DIR }} apply -var="env=staging" -auto-approve

    - name: Run Acceptance & Security Tests (OWASP / K6)
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "ðŸ§ª Running QA, Regression, and Security Tests..."
        zap-cli quick-scan http://staging-url
        k6 run tests/load_test.js

    ## PRODUCTION DEPLOYMENT (main branch)
    - name: Deploy to Production (Blue-Green)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Deploying to Production (Blue-Green)..."
        terraform -chdir=${{ env.TERRAFORM_DIR }} apply -var="env=prod" -auto-approve

    # MONITORING & FEEDBACK
    - name: Send Deployment Notification
      if: always()
      run: |
        STATUS=${{ job.status }}
        BRANCH=${GITHUB_REF##*/}
        echo "Sending ${STATUS} notification for ${BRANCH}..."
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Deployment *${STATUS}* for branch *${BRANCH}* of *${{ env.APP_NAME }}*\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
